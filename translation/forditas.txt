CHAPTERS
  Introduction
  Maps and spatial functions
  Basis for datamodelling on vector based dataset.
  Spagetti model.
  Network model.
  Definition of topology with relational datamodel.
  Spatial indexing.
  
  Basis for datamodelling on raster based dataset.
  Datastructure for raster dataset.
  Intensity transformation.
  Mathematical background on digital filters.
  Digital filters.
  Edge-detection.
  Non-linear filters.
  Kuszoboles.
  LOD algorithms.


Introduction
  An introduction on geoinformatics, a new branch of information technology, using both graphical and database knowledges. In the 1600's mathematics have become the basis for almost every natural sciences, as information technology in our days. Based on high standards, professional softwares, database technologies, graphical representations are used and applied widely among almost every science areas. By keeping the primary goals of geoinformatics,  information technologies have been applying their newest achievements in geoinformation sytstems. New methodologies have been introduced for representing and analyzing spatial based data.
  In the following chapters, concepts, theoratical ideas used by geoinformatics will be introduced. Mathematical methods, principles and algorithms behind softwares are being dicussed in detail. We think it's crucial for students, attending practive oriented classes,that they should get familiar with methods and principles behind geoinformation sysytems, along with their routinish user level and practical problem solvers. 
  Further goals of this material is to introduce a rapidly expanding world of open source technologies. Although only theoratical concepts will be discussed, further materials will rely on these knowledge to introduce problems solved by opensource tools and programming libraries. The world of opensource are relying on modern theoratical, computer science background what we will discuss in the following chapters. Interestingly, the world of opensource are progressing in a much faster pace then commercial softwares, who are essentially aiming for higher profit, thus their software concept only changes when it is inevitable by loosing profit. That's not how opensource world operates, they would rather focusing on technical challenges.
  While editing this material on opensource technologies, bearing in mind that beyond theoratical knowledge, fully functional GIS applications and programming libraries which do not require existing spatial softwares, rather funciontalities are coming from the users by experience.

  What is spatial?
  By first glance the earth is spherical, which leads to the use of polar-coordinate system, having lambda and theta angles with r radius giving any P point coordinate's. (Let's accept this abstract approach, although we know that, the earth is not spherical from projections and referenced surface is not spherical).
  One of the most important task of a map is to express spatiality by representing the earth on a spherical surface. Wether you are using a spatially flat traditional paper map or a digital map on a monitor, both methods needed projection from spherical to planer resulting distortion of the original image. A spherical surface can not be projected to planer surface without undistorted. Projection theory are dealing with similar problems.
  Let us assume that, projected planer maps are avaiable before building a spatial information system. The only exception is data measured by GPS, which are fundamentally geographical coordinates (although transformation is applicable into planer surface).
  Vectorized digital maps have been projected into planer surface by analog source map. Plane to plane transformations are needed when changing projection systems, calibration, georeferencing operations are done. As an example for importing digitalized map, and reproject it into a new projection system, plane to plane transformation is needed.
  In case of remote sensed images, ground control coordinates defines the reference points between relative coordinates of source images and real coordinates of transformed images. In the following sections, we will discuss some of the mostly used planer transformations in geoinformation systems.
  
  Planer transformations
  Put the case that we have a paper map in a given projection systems. Our task is to vectorize it. During vectorization we may keep the source projections system, although we could transform it into new projection system if required.
  Generally raster based digitalized maps are scanned in relative coordinate system (upper-left coordinate is the origin, size are measured in pixels), transformation (georefrencing) is needed into real coorindate system.
  Let's take a look at figure 2., which describes the possible plane transformations like, congruent, isomorph, affine, projective and topologic. For every single transformations invariants are related, which remain constant during transformation.
    Figure 2. Possible planer transformations> 1. Congruent, 2: Isomorph, 3: Affine, 4: Projective, 5: Topological

  > Congurent transformation
  During transformation neither it's size or shape changes.

  > Isomorph transformation
  During isomorph transformation feature's size do change, however it's shape does not. Usually named Conform transformation, due to the angles are not modified during transformation (figure 3.).
    Figure 3. Example for conform transformation: 1: Orientation preserved conform transformation, 2: Inverted orientation conform transformation a) source feature b) transformed feature.

  > Affine transformation
  During affine transformation both it's size and shape are changed, but parallelity is preserved. Note that included angles are not invariants.
    Figure 4. Affine transformation: 1: Original shape, 2: Transformed shape.
  As shown in figure 4. A'B' <> AB and A' angle <> A angle, although A'D' || B'C', additionally every each point on AD lies on A'D'. 
  Equation for affine transformation:
    x' = ax + by
    y' = cx + dy
  The following table summarizes affine transformation's properties: image
  Affine transformation is one of the mostly used transformation method in Geoinformatics. Georeferencing action is applied, when the source map is a scanned raster image, relative coordinates are correlated to referenced coordinates, which is an affine transformation. Most of the coordinate system transformations are based on affine transformation method. 

  > Projective transformation
  During projective transformation none of the following properties are changed: size, shape and parallelity, but straight lines remain straight. This type of transformation is scarcely used on vector based data types. Although projective transformation may come handy for solving representation of 3 dimensional data, where perspective representation is needed.

  > Topological transformation
  During topological transformation angles, distances and parallelity are changed, however, continuity, ordinality and vicinity properties are intact. This type of transformation became relevant when affine transformation did not give correct result, due to the deformation of raster based data during georeferecing.
  Deformation may occur in the course of scanning a raster map, the scanner's paper transfer rollers may slid the paper. In these cases, event a correct georeferecing does not give correct transformation. Despite of correct ground control points and available known points with correct coordinates, which are detectable on the scanned map are not in the correct position. In cases like this, affine transformation is performed location by location, with adding as many ground control points as possible.

  Tesselation
  There are two ways to cover a surface: regular and irregular tesselation. Figure 5 shows the base cases.
  The first case describes the process of segmentation on a paper map. Traditional cartographer's main concern with covering the selected area with paper based maps, which is segmentation.  During this process, they have selected the size of maps to cover the selected area, the type of thematical information to be used, the amount of information to display on the selected paparmap. Based on this standard scales and content have been developed. A section division and enlarged section can be seen in the lower right corner and the corresponded map are shown in figure 6. The surface of Hungary are covered with gap and overlap free in different scale and hierarchially organized sections. The ordinality of each section is tightly related to it's hierarchial position. 
    Figure 6. System of EOV sections, containing the are with 75-342 numbered section. 
    Figure 7. 75-342 map section.
  On figure 5. the second case is a correct tesselation. Information on surface are stored in grids, for example in case of remote sensed or aerial images intensity values on base colours, height values on digital terrain models, the normal value of data are derived from sampled grid data. For a sampled spot (e.g.: pixel) some area is rendered and every data stored within considered as valid data (figure 8.). So, in case of images, these are pixel having the same intensity values or height step with constant height value.
  On figure 5. the third and fourth cases are correct irregular tesselations. The third case cound demonstrates a surface covered by a set polygons with gap and overlap free defined by legal regulations or a scientific fact, like a geological map (figure 10.). Finally the fourth case demonstrates a polygon-system, generated by mathematical, to be exact geometrical algorithm coving the surface gap and overlap freely. Further materials are available on third case in "Vector datamodel", fourth case in "3D graphical, surface modelling" chapters.
    Figure 8.: Sketch of Australia represented with different grid settings.
    Figure 9.: An example for irregular tesselation, where surface is covered according to legal regulations.
  On figure 9. A portion of a cadastral map is shown (only cadastral boundaries), which clearly the usage of irregular coverage, where nor the regularity of sampling and neither the tesselation algorithms can not be observed.
    Figure 10.: Example for irregular tesselation, where the surface is covered by real physical objects (e.g: variant quality stones).


  Chapter 2.
  Maps and spatial functions

    Requirements agains a map can be shortly summarized in few sentences. A map is a model of the actual world, representing the earth surface by a predefined set of rules along with it's properties. We expect the model to guide, navigate, identify our current position spatially and relatively to anchor objects. A model should help us reviewing a larger area, as well as providing all the relevant details on given area with certain context. It should be able to represent an occurence or process, physical quantity, spatial distribution, quality and quantitive measure, leading us to understand and judge a given problem if needed. By comparing multiple objects with their spatial expansion, we should be able to analyze the relation and interaction between these objects. In some cases, a model should provide an overall review on spatial data.
    Both traditional paper maps and modern digital maps fulfill the above listed functionalities. In case of paper based maps, 


  Chapter 3.
  Vector data model

  Vector data model represents geometrical objects with characteristical information like points position, which are (x,y) coordinates for two-dimensional data, (x,y,z) coordinates for three-dimensional data. We should also know and store the projection system definition of coordinates. Supposedly softwares responsible for storing geometrical data can process coordinate systems. 
  Every feature contains a set of points coordinates connected by rules (the simplest case is by incoming order). In accordance with the mathematical summary of chapter graph theory, objects are defined with graphs. Lines and polygons are build-up by characteristical points like vertexes or nodes.
  How to decide which points are characteristical, in order to answer this question, let's take a closer look at an example of data input for vector based data. Data source can be remote sensing imagery or aerial photography images, in order to vectorize input data, we must detect control objects like rivers, roads, buildings and their characteristical points( building's reference points, road's junction points, river's junction points, etc.) can be detected relatively easily. However the substantial part is object dectection, which can be done with human interaction's knowledge, experience and expertise. Without him/her vectorization process can not be delivered.
  Another consideration aspect is based on the purporse of usage for vectorized map.  According to predefined purpose of usage, the list of important, less important and neglectable objects are known, before vectorization process. For example, in case of vectorizing administration maps based on scanned paper based maps. In this case, every administrative boundary are important data, on the contrary rivers are less important, although not neglectable. Streams can be neglected, therefore are not present on digitalized map (even if it was present on the paper based map).
  Figure 20: On the right handside, the reality, which will be stored and represented in vector data modell.
  Vector based representation as described in figure 20, objects are projected perpendicularly to the surface in a coordinate system which is scaled in North-South orientation. During the process of vectorization based on paper maps, human interaction is required, with expertise in order to detect and select measure and characteristic points. At the end, our conclusion is that, human interaction with vast background-knowledge is required in the process of vectorization.
  Figure 21: (left-hand-side) Examples for one-dimensional objects: a) line segment (section); b) linestring (polyline) with extreme points (end points) and vertices; c) non-intersected linestring; d) closed polyline; e) monoton polyline; f) non-monoton polyline; 
  Figure 21: (right-hand-side) Examples for two-dimensional objects: aa) simple polygon; bb) complex-polygon (only exists as invalid object in geoinformatics); cc) convex-polygon; dd) monoton polygon; ee) polygon with inner structure (hollow polygon); ff) region with geometrically non-related objects [Rigaux et al]
  
  As represented in figure 20, where the real objects are vectorized. For modelling real world objects, geometry elements are used, like 0-dimension point and 1-dimension line. A specialized case for lines are polylines, which is a sequence of connected lines (by connecting lines, a constraint have been stated on vector data model, by introducing topological relation between lines). The other geometrical object is a two-dimensional polygon, build-up by a sequence of points (figure 21). A more accurate definition for a polygon is a sequence of connected segments, having identical start and end point, moreover it's topmost attribute is that, it's a closed area. Connectivity and closeness are topological constraints on connected segments. 
  Figure 22: How Complex features are built-up from simple features (geometric primitives): 1 -- level of nodes; 2 -- level of lines and polygons; 3 -- level of features; 4 -- levle of complex features.

  As represented on figure 22, only on base level, nodes contains coordinates data. Other features higher than node level, like linestring, and polygons contains only structural information, describing information with related features on lower abstraction level, which means that storing geometrical data is not sufficient, therefore creation and relation data between hierarchy levels are also required, for example features on lines and polygons level, should contain corresponding data on sequence of related points creating lines or polygons. Vector data model has various advantages, like:
  - nodes are stored when there is break point on a segment.
  - hard disk space efficient graphical representation.
  - an option for set up feature hierarchy levels.
  - unlimited number of connections to databases.
Figure 23 describes data stored in database. Additional information, attributes can be added in form of database tables, if business logic requires so. 
  Figure 23. Schematic diagram on relation between graphical and descriptive data. Relation between graphical objects and descriptive data is 1:1.
  Figure 24. By creating feature groups yields adaptive data structures. Object-oriented system name it as "feature-class" (attribute classes), classical based on CAD terminologies software developers rather call it as "layer". As an example a feature class have been described: real estate values, containing parcels, buildings and public utility classes.
  
  For the ease of handling, vector data should be grouped logically depending on our purpose. Arbitary grouping based on declartion of system designer,developer could be a grouping method, where a designer's job to sort objects into groups (feature class or layer) eventually with greater resposibility over the system. Data can be groupped by feature attributes. Groupping can be fixed with non-variable data or flexible with dynamic grouping conditions.


  Chapter 4
  Spaghetti model
  Vector data are stored by coordinates, as well as the relation between features, moreover connection relation should also be stored in vector model. Many everyday questions reveals the importance of topological data structure:
  - "How do I get to the train-station", asked by a lost touriest.
  - "Go straight ahead until the second turning, then turn right and follow until it crosses a level crossing, after that keep left to the tracks you will reach the station".
  - "What's in between my and my neighbour's parcel?". The answer would be: "Nothing, only a fence, which is a 1-dimensional object", otherwise we could not be neighbours if there is another object between us.
  Topology describes relations and connections (overlap, break points) between features.

  Spaghetti model stores only connection rules between nodes and coordinates refering to nodes. It does not investigate topological relations between objects, for example neighbours of a polygon, is there a common node for overlapping polygons. It also does not store continuity and the order of features.
  Figure 25. On of the typical mistake in spaghetti model. Dotted and continous lines should rely on each other, however it's not true, as shown by arrows, moreover the arrow with a question mark reveals a node which does not have a corresponding continous pair.
  Most of the GIS softwares provides a general editing tool based on spaghetti model. It's advantage reside in simplicity, at the same time also a disadvantage. By letting a loosely coupled data structure in use, many mistakes are made, resulting bad quality spatial databases. GIS experts are capable of producing high-quality spatial data, although it's not advisable to apply spaghetti model in a widely used environment. General editing tools are using their own data format, which does not support relational data structure design elements like vicinity and relational considerations.
  Despite of error proneness by using spaghetti model, some of the GIS software are still using them. For checking if a polygon a ring, by inspecting discontinuity of linestrings is done on software level, even though data structure does not support data consistency which may be checked by comparing coordinates by coordinates. As shown in figure 25 a concept for modelling spaghetti model with relation database. The "geometriai elemek" table store unique identifier on nodes (primary key) and their coorindates. The "objektumok" table contains the unique identifier of additional attribute data, like "Name", "Field1", etc. Note that, the order of nodes is crucial, since only incrementally drawing nodes yields correct polygon. Structure described in figure 25 gives the ability of storing polygons topologically, however with no guarantee that it's correct all the time. Manual or software based interaction is needed for correct topology.
  Figure 26. Nodes and polygons composed of nodes defined by connection tables. However it does not contain any information on topology.
 

  Chapter 5
  Network model
  It was intended to define objects by a network of segments with network topology like transportation orgranization, shipping, logictical challenges, public utility networks and relations. All of them  are modelled based on graphs where nodes are defined by business logics rules. Arcs and polylines are distinguished.
  As you can see, it's recommended to handle polylines containing many nodes as arcs, especially in routing optimization questions, because these polylines does not have junction points. Many graph algorithms exists for routing questions, however due to the content-lenght limitations of this book, routing optimization will be left out of discussion.
  Figure 27. Nodes, polylines and arcs composes networks [Rigaux et al]

  Linear referencing
  Localization can be determined in various ways. The most common way by giving x,y,z coordinates along with postal codes, which have been applied for quite a long time. (Let us asume that a friend of us, instead of  giving the address, coordinates are given, we would be surprised, as postal code based localization method is known and accepted.) Line based features, like public utility and transportation networks (roads, railways),for describing any points on it, let's use the following method, which is one of the most commonly used model based on network model. 




















